#!/usr/bin/env ruby

######################################################################
#  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
#  All rights reserved.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
######################################################################

::Signal.trap('INT') { abort }

require 'optparse'
require 'pathname'

# Set up options parsing
argv = ARGV.dup
options = {
  debug: false,
  windows: false
}
opts = ::OptionParser.new do |o|
  o.banner = 'Usage: dj_worker_command [options] RUBY_EXE LOG_DIR PROJECT_DIR DB_PORT RAILS_PORT WORKER_NUMBER'
  o.separator ''
  o.separator 'RUBY_EXE: Absolute path to the ruby executable to use'
  o.separator 'LOG_DIR: Absolute path of the directory to write the Delayed Jobs log to'
  o.separator 'PROJECT_DIR: Absolute path to the PAT project DIRECTORY'
  o.separator 'DB_PORT: Port used by the mongod instance'
  o.separator 'RAILS_PORT: Port that rails runs on'
  o.separator 'WORKER_NUMBER: Number or workers to use'
  o.on('-w', '--windows', 'Flag to indicate running on Windows') { |_| options[:windows] = true }
  o.on('-d', '--debug', 'Print debugging information to STDOUT') { |_| options[:debug] = true }
end

# Parse arguments and verify them
opts.parse!(argv)
ruby_exe = argv.shift
log_dir = argv.shift
project_dir = argv.shift
db_port = argv.shift
rails_port = argv.shift
worker_number = argv.shift
inputs_empty = ruby_exe.nil? | log_dir.nil? | project_dir.nil? | db_port.nil? | rails_port.nil? | worker_number.nil?
raise 'RUBY_EXE, LOG_DIR, PROJECT_DIR, DB_PORT, RAILS_PORT, and WORKER_NUMBER are all required for execution' if
  inputs_empty
error_msg = ''
error_msg << "The RUBY_EXE provided, `#{ruby_exe}`, is not absolute. " unless Pathname.new(ruby_exe).absolute?
error_msg << "The LOG_DIR provided, `#{log_dir}`, is not absolute. " unless Pathname.new(log_dir).absolute?
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, is not absolute. " unless Pathname.new(project_dir).absolute?
raise error_msg unless error_msg.empty?
error_msg << "The RUBY_EXE provided, `#{ruby_exe}`, does not exist on the file system. " unless File.exist? ruby_exe
error_msg << "The LOG_DIR provided, `#{log_dir}`, does not exist on the file system. " unless Dir.exist? log_dir
error_msg << "The PROJECT_DIR provided, `#{project_dir}`, does not exist on the file system. " unless
  Dir.exist? project_dir
raise error_msg unless error_msg.empty?

# Create the system call to use
bundle_path = File.absolute_path(File.join(__FILE__, './../../../../gems/bin/bundle'))
::Dir.chdir(File.absolute_path(File.join(__FILE__, './../../../../server/')))
::ENV['OS_SERVER_MONGO_PORT'] = db_port
::ENV['OS_SERVER_DATABASE_NAME'] = 'os_local'
::ENV['OS_SERVER_LOG_PATH'] = log_dir
::ENV['OS_SERVER_HOST_URL'] = 'http://localhost:' + rails_port
::ENV['RAILS_ENV'] = 'local'
if options[:windows]
  sys_call = "\"#{ruby_exe}\" \"#{bundle_path}\" exec \"#{ruby_exe}\" bin/delayed_job -i worker_#{worker_number} --queue=simulations run --log-dir=\"#{log_dir}\" --pid-dir=\"#{project_dir}\""
else
  sys_call = "'#{bundle_path}' exec '#{ruby_exe}' bin/delayed_job -i worker_#{worker_number} stop && bin/delayed_job -i "\
    "worker_#{worker_number} --queue=simulations start --log-dir='#{log_dir}' --pid-dir='#{project_dir}'"
end
puts "ENV for starting rails: #{::ENV.inspect}" if options[:debug]
puts "System call will be: '#{sys_call}' in directory '#{Dir.pwd}'" if options[:debug]

# Execute the system call
exec sys_call
